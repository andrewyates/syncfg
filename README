syncfg is a system for synchronizing config files and static directories.
Config files are comprised of config "sources" (or "parts") that are appended to create the final config file. The list of config sources comprising each config file can be different for each host. syncfg provides two advantages over traditional configuration management:
- configs are only edited once and in one place (the syncfgd server) and may easily be managed with git there
- changes to a config are propagated to all clients with no manual intervention
As you may imagine, this requires that one chooses logical config parts. Static directories exist to help keep scripts and libraries in sync, such as the elisp libs in .emacs.d/lisp/. Directories are not made up of multiple parts as configs are.

Requirements:
- libconfig (on Ubuntu systems install the libconfig++8-dev package)
- python-libconfig (currently at http://github.com/azeey/python-libconfig)

Server:
- Create a CA, sign a server key with it, sign client keys with it, and distribute the client keys to your clients.
  The easy-rsa scripts from OpenVPN are the easiest way to do that. See /usr/share/doc/openvpn/examples/easy-rsa
- On the server, the following keys should be present in the base directory:
  keys/ca.crt
  keys/server.crt
  keys/server.key
  If you want to store the SSL certs to an alternate location, edit service.tac.
- Rename config.sample to config, copy to your base directory (~/.config/syncfgd/ by default), and edit it
- Create your config file parts in the configs directory in your base directory (~/.config/syncfgd/configs by default)
- Populate the dirs directory with any required static files (~/.config/syncfgd/dirs)
- Launch the daemon with twistd -ny service.tac or use the start-server.sh and stop-server.sh scripts

Client:
- On each client, copy client-config.sample to ~/.config/syncfg/config and edit
- To update configs on a client, run: python client.py -f ~/.a_file_to_update -f ~/file2 -d ~/dir1 -d ~/dir2

