# this zshrc updates the user's real zshrc and then loads it
# it is intended to be used to check for ~/.zshrc updates on login

# location of your real zshrc (this loader must be your ~/.zshrc so that it's run on login)
ZSHRC="$HOME/.zshrc_full"

# location of syncfg script
SYNCFG="$HOME/.local/syncfg/syncfg"

# file to store the RPROMPT to display in
RPROMPT_FILE="$HOME/.rprompt"

# file to store the original RPROMPT in
RPROMPT_BACKUP="$HOME/.rprompt_backup"

# location of background updater script
# this script will be run after $ZSHRC is updated. it should edit RPROMPT_FILE to reflect its status 
# as files are updated, send SIGUSR1 to all zsh processes when the file is modified,
# and copy RPROMPT_BACKUP over RPROMPT_FILE before exiting
UPDATER="$HOME/.config/syncfg/updater"

# temporary update log. written once every time this script is run
TMPLOG="$HOME/.config/syncfg/.updatelog"

# location of lock file. used to prevent two syncfg instances from running at once
LOCK="$HOME/.config/syncfg/.lock"

TRAPUSR1() {
  [[ -o zle ]] && zle -I  # Invalidate zle display
  new=`cat $RPROMPT_FILE`
  export RPROMPT=$new
}

# check lock file and don't update if either
# 1) $LOCK exists and contains a date < 30 seconds ago
# or 2) $LOCK exists and was modified < 60 seconds ago
# (2) is intended to handle crashes
cutoff=$[`date +%s` - 30]
if [[ -e $LOCK && ((`cat $LOCK` -gt 0 && `cat $LOCK` -lt  $cutoff) ||
      `stat -c "%Z" $LOCK` -lt $[$cutoff - 30]) ]]; then
        date +%s > $LOCK
elif [[ ! -e $LOCK ]]; then
        date +%s > $LOCK
else
        # another instance is updating, so don't update here
        sleep 1
        source $ZSHRC
        return
fi

$SYNCFG -v -f $ZSHRC > $TMPLOG

# if exit status is != 0, print error
if [[ $? -ne 0 ]]; then
   echo warning: syncfg exited with a nonzero exit status
fi

grep -v ": ok$" $TMPLOG

touch $RPROMPT_FILE

source $ZSHRC

echo -n $RPROMPT > $RPROMPT_BACKUP

$UPDATER "$SYNCFG" "$RPROMPT_FILE" "$RPROMPT_BACKUP" & disown

rm -f $LOCK
